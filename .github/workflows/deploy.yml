name: Deploy Paquetes Service

on:
  push:
    branches: [ main ]

env:
  EC2_HOST: "ec2-3-16-112-149.us-east-2.compute.amazonaws.com"
  SERVICE_NAME: "paquetes"
  SERVICE_PORT: "8081"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Setup AWS SSH Key
        run: |
          mkdir -p ~/.ssh
          # Usar la clave .pem de AWS directamente
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Test AWS SSH Connection
        run: |
          echo "Testing connection to EC2 instance..."
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=10 \
              ec2-user@$EC2_HOST "echo '‚úÖ Successfully connected to EC2 using AWS key'"

      - name: Deploy to EC2
        run: |
          echo "Starting deployment..."
          
          # Upload JAR file
          scp -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              target/*.jar \
              ec2-user@$EC2_HOST:/home/ec2-user/$SERVICE_NAME/
          
          echo "JAR uploaded successfully"
          
          # Execute deployment commands
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              ec2-user@$EC2_HOST "
              
            cd /home/ec2-user/$SERVICE_NAME
            
            echo '=== Starting deployment process ==='
            
            # Create backup if needed
            if ls *.jar > /dev/null 2>&1; then
              mkdir -p backup
              mv *.jar backup/
              echo 'Backup created'
            fi
            
            # Stop any running service
            echo 'Stopping existing service...'
            pkill -f 'java.*$SERVICE_NAME' || echo 'No running service found'
            sleep 5
            
            # Ensure port is free
            echo 'Checking port $SERVICE_PORT...'
            lsof -ti:$SERVICE_PORT | xargs kill -9 2>/dev/null || true
            sleep 2
            
            # Start the application
            echo 'Starting $SERVICE_NAME on port $SERVICE_PORT...'
            nohup java -jar *.jar --server.port=$SERVICE_PORT --server.address=0.0.0.0 > app.log 2>&1 &
            echo \"Application started with PID: \$!\"
            
            # Wait for startup
            echo 'Waiting for application to start...'
            sleep 30
            
            # Verify deployment
            if ss -tuln | grep -q \":$SERVICE_PORT\"; then
              echo 'üéâ DEPLOYMENT SUCCESSFUL!'
              echo 'Service: $SERVICE_NAME'
              echo 'Port: $SERVICE_PORT'
              echo 'URL: http://$EC2_HOST:$SERVICE_PORT'
            else
              echo '‚ùå DEPLOYMENT FAILED'
              echo 'Application logs:'
              cat app.log
              exit 1
            fi
          "

      - name: Verify Deployment
        run: |
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              ec2-user@$EC2_HOST "
            echo '=== Deployment Verification ==='
            echo 'Java processes:'
            ps aux | grep java | grep -v grep || echo 'No Java processes'
            echo ''
            echo 'Open ports:'
            ss -tuln | grep -E ':(8080|8081|8082|8083|8084)' | sort || echo 'No deployment ports'
            echo ''
            echo 'Service $SERVICE_NAME status:'
            if ss -tuln | grep -q \":$SERVICE_PORT\"; then
              echo '‚úÖ RUNNING on port $SERVICE_PORT'
            else
              echo '‚ùå NOT RUNNING'
            fi
          "
