name: Deploy Paquetes Service

on:
  push:
    branches: [ main ]

env:
  SERVICE_NAME: paquetes
  SERVICE_PORT: 8081
  EC2_HOST: "ec2-3-16-112-149.us-east-2.compute.amazonaws.com"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          # Verificar la clave
          echo "=== Verificaci√≥n SSH ==="
          ls -la ~/.ssh/
          echo "Primera l√≠nea clave: $(head -1 ~/.ssh/id_rsa)"

      - name: Test SSH Connection
        run: |
          echo "=== Probando conexi√≥n a $EC2_HOST ==="
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=10 \
              ec2-user@$EC2_HOST "echo '‚úÖ SSH exitoso - Conectado a EC2'"

      - name: Prepare EC2 Directories
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "
            echo '=== Preparando directorios en EC2 ==='
            mkdir -p /home/ec2-user/$SERVICE_NAME/backup
            echo 'Directorios listos para $SERVICE_NAME'
          "

      - name: Deploy Application
        run: |
          echo "=== Subiendo JAR a EC2 ==="
          scp -i ~/.ssh/id_rsa \
               -o StrictHostKeyChecking=no \
               target/*.jar \
               ec2-user@$EC2_HOST:/home/ec2-user/$SERVICE_NAME/
          
          echo "‚úÖ JAR transferido exitosamente"

      - name: Start Service on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "
            cd /home/ec2-user/$SERVICE_NAME
            
            echo '=== Iniciando despliegue de $SERVICE_NAME ==='
            
            # 1. Backup del JAR anterior
            if ls *.jar > /dev/null 2>&1; then
              echo 'Creando backup...'
              mkdir -p backup
              mv *.jar backup/
              echo '‚úÖ Backup completado'
            fi
            
            # 2. Detener servicio existente
            echo 'Deteniendo servicio anterior...'
            pkill -f 'java.*$SERVICE_NAME' || echo 'No hab√≠a servicio ejecut√°ndose'
            sleep 3
            
            # 3. Liberar puerto si est√° ocupado
            echo 'Verificando puerto $SERVICE_PORT...'
            PORT_PID=\$(lsof -ti:$SERVICE_PORT 2>/dev/null || echo '')
            if [ ! -z \"\$PORT_PID\" ]; then
              echo \"Forzando liberaci√≥n de puerto - PID: \$PORT_PID\"
              kill -9 \$PORT_PID
              sleep 2
            fi
            
            # 4. Iniciar nuevo servicio
            echo 'Iniciando $SERVICE_NAME en puerto $SERVICE_PORT...'
            nohup java -jar *.jar --server.port=$SERVICE_PORT --server.address=0.0.0.0 > app.log 2>&1 &
            APP_PID=\$!
            echo \"‚úÖ Servicio iniciado - PID: \$APP_PID\"
            
            # 5. Esperar y verificar
            echo 'Esperando inicio del servicio (25 segundos)...'
            sleep 25
            
            # 6. Verificaci√≥n final
            echo '=== Verificando despliegue ==='
            if ss -tuln | grep -q \":$SERVICE_PORT\"; then
              echo 'üéâ üéâ üéâ DESPLIEGUE EXITOSO üéâ üéâ üéâ'
              echo 'Servicio: $SERVICE_NAME'
              echo 'Puerto: $SERVICE_PORT'
              echo 'PID: \$APP_PID'
              echo '--- √öltimas l√≠neas del log ---'
              tail -5 app.log
            else
              echo '‚ùå ERROR: El servicio no se inici√≥ correctamente'
              echo '--- Log completo ---'
              cat app.log
              echo '--- Estado del proceso ---'
              ps -p \$APP_PID >/dev/null && echo 'Proceso activo' || echo 'Proceso no encontrado'
              exit 1
            fi
          "

      - name: Final Health Check
        run: |
          echo "=== Verificaci√≥n de salud final ==="
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "
            echo 'üìä Estado del sistema:'
            echo '--- Servicios activos ---'
            ps aux | grep java | grep -v grep | while read line; do
              echo \"  üìç \$line\"
            done || echo '  No hay servicios Java activos'
            
            echo ''
            echo '--- Puertos en escucha ---'
            ss -tuln | grep -E ':(8080|8081|8082|8083|8084)' | while read line; do
              echo \"  üîµ \$line\"
            done || echo '  No hay puertos de microservicios'
            
            echo ''
            echo '--- Recursos del sistema ---'
            echo \"  üíæ Memoria: \$(free -h | grep Mem | awk '{print \$3\"/\"\$2}')\"
            echo \"  üíø Disco: \$(df -h /home/ec2-user | tail -1 | awk '{print \$3\"/\"\$2}')\"
            
            echo ''
            echo '=== ESTADO FINAL ==='
            if ss -tuln | grep -q \":$SERVICE_PORT\"; then
              echo '‚úÖ ‚úÖ ‚úÖ $SERVICE_NAME DESPLEGADO CORRECTAMENTE ‚úÖ ‚úÖ ‚úÖ'
              echo 'üìç Puerto: $SERVICE_PORT'
              echo 'üåê URL: http://$EC2_HOST:$SERVICE_PORT'
            else
              echo '‚ùå $SERVICE_NAME NO EST√Å EJECUT√ÅNDOSE'
              exit 1
            fi
          "
