name: Deploy Clientes Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SERVICE_NAME: paquetes
  SERVICE_PORT: 8081

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Run tests
        run: mvn test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Verify JAR
        run: |
          echo "✅ JAR built successfully:"
          ls -la target/*.jar

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create directories on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
            mkdir -p /home/ec2-user/$SERVICE_NAME/backup
            echo 'Directories created for $SERVICE_NAME'
          "

      - name: Deploy to EC2
        run: |
          # Upload JAR
          scp -i ~/.ssh/id_rsa target/*.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/$SERVICE_NAME/
          
          # Stop and start service
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
            cd /home/ec2-user/$SERVICE_NAME
          
            # Create backup if JAR exists
            if ls *.jar 1> /dev/null 2>&1; then
              mv *.jar backup/
              echo 'Backup created'
            fi
          
            # Stop running service
            echo 'Stopping existing service...'
            pkill -f 'java.*$SERVICE_NAME' || true
            sleep 3
          
            # Kill any process using the port
            PORT_PID=\$(lsof -ti:$SERVICE_PORT 2>/dev/null || echo '')
            if [ ! -z \"\$PORT_PID\" ]; then
              echo \"Killing process \$PORT_PID on port $SERVICE_PORT\"
              kill -9 \$PORT_PID 2>/dev/null || true
              sleep 2
            fi
          
            # Start new service
            echo 'Starting $SERVICE_NAME on port $SERVICE_PORT...'
            nohup java -jar *.jar --server.port=$SERVICE_PORT --server.address=0.0.0.0 > app.log 2>&1 &
            echo \"Service started with PID: \$!\"
          
            # Wait and verify
            sleep 25
          
            # Health check
            if curl -s http://localhost:$SERVICE_PORT/actuator/health > /dev/null; then
              echo '✅ Health check passed'
            elif ss -tuln | grep -q \":$SERVICE_PORT\"; then
              echo '✅ Port is listening (health check unavailable)'
            else
              echo '❌ Service failed to start'
              echo '=== Application logs ==='
              cat app.log
              exit 1
            fi
          "

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
            echo '=== Deployment Verification ==='
            echo 'Service: $SERVICE_NAME'
            echo 'Port: $SERVICE_PORT'
            echo ''
            echo 'Process:'
            ps aux | grep java | grep $SERVICE_NAME | grep -v grep || echo 'No process found'
            echo ''
            echo 'Port status:'
            ss -tuln | grep \":$SERVICE_PORT\" || echo 'Port not listening'
            echo ''
            echo 'Last logs:'
            tail -10 /home/ec2-user/$SERVICE_NAME/app.log || echo 'No logs'
          "