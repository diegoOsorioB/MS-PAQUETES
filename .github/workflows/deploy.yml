name: Deploy Paquetes Service

on:
  push:
    branches: [ main ]

env:
  SERVICE_NAME: paquetes
  SERVICE_PORT: 8081
  EC2_HOST: "ec2-3-16-112-149.us-east-2.compute.amazonaws.com"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Setup SSH with RSA Key
        run: |
          mkdir -p ~/.ssh
          # FORMA CORRECTA para clave RSA
          cat > ~/.ssh/id_rsa << 'RSAKEY'
          ${{ secrets.EC2_SSH_KEY }}
          RSAKEY
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          echo "=== Verificando clave RSA ==="
          head -2 ~/.ssh/id_rsa

      - name: Test SSH Connection
        run: |
          echo "=== Probando conexi√≥n SSH ==="
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=15 \
              ec2-user@$EC2_HOST "echo '‚úÖ Conexi√≥n SSH exitosa - Clave RSA funciona'"

      - name: Prepare EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "
            mkdir -p /home/ec2-user/$SERVICE_NAME/backup
            echo '‚úÖ Directorios listos en EC2'
          "

      - name: Deploy to EC2
        run: |
          # Subir JAR
          scp -i ~/.ssh/id_rsa \
               -o StrictHostKeyChecking=no \
               target/*.jar \
               ec2-user@$EC2_HOST:/home/ec2-user/$SERVICE_NAME/
          
          echo "‚úÖ JAR transferido a EC2"
          
          # Ejecutar en EC2
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "
            cd /home/ec2-user/$SERVICE_NAME
            
            echo '=== Iniciando despliegue ==='
            
            # Backup
            if ls *.jar > /dev/null 2>&1; then
              mkdir -p backup
              mv *.jar backup/
              echo '‚úÖ Backup creado'
            fi
            
            # Detener servicio
            echo 'Deteniendo servicio anterior...'
            pkill -f 'java.*$SERVICE_NAME' || echo 'No hab√≠a servicio activo'
            sleep 5
            
            # Liberar puerto
            PORT_PID=\$(lsof -ti:$SERVICE_PORT 2>/dev/null || echo '')
            if [ ! -z \"\$PORT_PID\" ]; then
              kill -9 \$PORT_PID
              sleep 3
            fi
            
            # Iniciar servicio
            echo 'Iniciando $SERVICE_NAME en puerto $SERVICE_PORT...'
            nohup java -jar *.jar --server.port=$SERVICE_PORT --server.address=0.0.0.0 > app.log 2>&1 &
            echo \"‚úÖ Servicio iniciado - PID: \$!\"
            
            # Esperar
            sleep 30
            
            # Verificar
            if ss -tuln | grep -q \":$SERVICE_PORT\"; then
              echo 'üéâ DESPLIEGUE EXITOSO'
              echo 'URL: http://$EC2_HOST:$SERVICE_PORT'
            else
              echo '‚ùå Falla en despliegue'
              echo 'Logs:'
              cat app.log
              exit 1
            fi
          "
